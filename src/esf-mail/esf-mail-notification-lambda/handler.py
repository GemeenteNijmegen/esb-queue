import json
from botocore.exceptions import ClientError
import logging

logger = logging.getLogger()
logger.setLevel("INFO")


def get_encoded_msg(event):
    """Get the (JSON) message as a python object from the SQS message,
    """
    msg = event['Records'][0]['body']
    return json.loads(msg)

def get_data(msg):
    data_list = msg.get('data')
    if(data_list != None and len(data_list) > 0):
        return data_list
    else:
        return None

def get_metadata(msg):
    metadata_list = msg.get('metadata')
    if(metadata_list != None and len(metadata_list) > 0):
        return metadata_list
    else:
        return None

def get_recipients(msg):
    """Get recipients from the received SQS message.
    It always returns a list of recipients, or None
    """
    recipient_list = msg.get('e-mailadressen')
    if(recipient_list != None and len(recipient_list) > 0):
        return recipient_list
    else:
        return None

def backup_message(s3, messageId, klantnummer, correlationId, backupBucketName):
    """Backup the message (including messageId, klantnummer and correlationID)
    to use when mail is bounced. CorrelationId is het ID generated by the ESB and
    it refers to the id of the batch (CSV).
    """
    try:
        # Create JSON object
        json_object = {"messageId": messageId, "klantnummer": klantnummer, "correlationId": correlationId}

        # Write to s3
        s3.put_object(
            Body=json.dumps(json_object), # Alternative: bytes(json_object).encode('UTF-8')
            Metadata={
                'project': 'esf'
            },
            Bucket=backupBucketName,
            Key=messageId,
            ContentType='application/json'
        )
    except Exception as e:
        logger.error(e)
    else:
        logger.info("Message backup to S3 using key:")
        logger.info(messageId)


def send_message(client, recipients, message, sender, s3, klantnummer, correlationId, backupBucketName):
    """Send an email message via SES, using the provided
    values. Returns the SES response.
    """
    try:
        # Send mail
        response = client.send_email(
            Destination={
                'ToAddresses': recipients,
            },
            Message=message,
            Source=sender,
        )
        if (response != None):
            logger.info("Message backup to S3. S3 Object ID:"),
            logger.info(response['MessageId'])
            backup_message(s3, response['MessageId'], klantnummer, correlationId, backupBucketName)
    # Throw error if mail fails
    except KeyError as e:
        logger.error('KeyError - reason "%s"' % str(e))
        logger.exception(e)
    except Exception as e:
        logger.exception(e)
    else:
        if (response != None):
            logger.info("Email sent! Message ID:"),
            logger.info(response['MessageId'])
        else:
            logger.info("No email send, recipients empty.")

def create_email_message(inleverdatum, draaidatum):
    """ Create the email body and subject in a format suitable for use
    in SES.
    """
    # The subject line for the email.
    subject = f"Notificatie formulier"
    
    # The email body for recipients with non-HTML email clients.
    body_text = ("Beste lezer,\r\n" 
                 "\r\n"
                 f"Het statusformulier van {draaidatum} staat voor u klaar.\r\n"
                 "\r\n"
                 f"Vul het formulier in v贸贸r {inleverdatum}. Vult u het formulier later dan {inleverdatum} in, dan krijgt u uw uitkering later."
                 "\r\n"
                 "Heeft u een partner, vul het formulier dan voor u en uw partner in."
                 "\r\n"
                 "http://app6.nijmegen.nl/#/form/ontwikkel/statusformulier"
                )
                
    # The HTML body of the email.
    body_html = f"""<html>
    <body>
        <p>Beste lezer,</p>
        <p>Het statusformulier van {draaidatum} staat voor u klaar.</p>
        <p>Vul het formulier in v贸贸r {inleverdatum}. Vult u het formulier later dan {inleverdatum} in, dan krijgt u uw uitkering later.</p>
        <p>Heeft u een partner, vul het formulier dan voor u en uw partner in.</p>
        <p>http://app6.nijmegen.nl/#/form/ontwikkel/statusformulier</p>
    </body>
    </html>
                """

    charset = "UTF-8"
    return {
        'Body': {
            'Html': {
                'Charset': charset,
                'Data': body_html,
            },
            'Text': {
                'Charset': charset,
                'Data': body_text,
            },
        },
        'Subject': {
            'Charset': charset,
            'Data': subject,
        },
    }